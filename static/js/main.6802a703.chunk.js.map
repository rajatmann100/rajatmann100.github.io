{"version":3,"sources":["components/Table.jsx","components/TableDetails.jsx","components/Summary.jsx","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","table","minWidth","borderTop","tableContainer","width","SimpleTable","props","classes","covidData","countries","Object","keys","sort","a","b","length","confirmed","TableContainer","component","Paper","className","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","map","country","key","scope","onClick","_","setCountry","deaths","recovered","data","i","rawData","push","style","display","marginRight","countrySelected","row","index","date","Summary","total","forEach","c","justifyContent","flexWrap","color","App","state","bind","fetch","then","response","json","setState","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6802a703.chunk.js","sourcesContent":["import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650,\n\n    borderTop: \"5px solid slategrey\"\n  },\n  tableContainer: {\n    width: \"90%\"\n  }\n});\n\nexport default function SimpleTable(props) {\n  const classes = useStyles();\n\n  var covidData = props.covidData;\n  var countries = Object.keys(covidData);\n  countries = countries.sort((a, b) => {\n    return (\n      covidData[b][covidData[b].length - 1].confirmed -\n      covidData[a][covidData[a].length - 1].confirmed\n    );\n  });\n\n  return (\n    <TableContainer component={Paper} className={classes.tableContainer}>\n      <Table className={classes.table} aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>\n              <b>Country</b>\n            </TableCell>\n            <TableCell align=\"right\">\n              <b>Confirmed</b>\n            </TableCell>\n            <TableCell align=\"right\">\n              <b>Deaths</b>\n            </TableCell>\n            <TableCell align=\"right\">\n              <b>Recovered</b>\n            </TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {countries.map(country => (\n            <TableRow key={country}>\n              <TableCell component=\"th\" scope=\"row\">\n                <button\n                  onClick={_ => {\n                    props.setCountry(country);\n                  }}\n                >\n                  {country}\n                </button>\n              </TableCell>\n              <TableCell align=\"right\">\n                {covidData[country][covidData[country].length - 1].confirmed}\n                &nbsp;(+\n                {covidData[country][covidData[country].length - 1].confirmed -\n                  covidData[country][covidData[country].length - 2].confirmed}\n                )\n              </TableCell>\n              <TableCell align=\"right\">\n                {covidData[country][covidData[country].length - 1].deaths}\n                &nbsp;(+\n                {covidData[country][covidData[country].length - 1].deaths -\n                  covidData[country][covidData[country].length - 2].deaths}\n                )\n              </TableCell>\n              <TableCell align=\"right\">\n                {covidData[country][covidData[country].length - 1].recovered}\n                &nbsp;(+\n                {covidData[country][covidData[country].length - 1].recovered -\n                  covidData[country][covidData[country].length - 2].recovered}\n                )\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650,\n    borderTop: \"5px solid slategrey\"\n  },\n  tableContainer: {\n    width: \"90%\",\n    borderTop: \"5px solid slategrey\"\n  }\n});\n\nexport default function SimpleTable(props) {\n  const classes = useStyles();\n  let data = [];\n  for (var i = Object.keys(props.rawData).length - 1; i > 0; i--) {\n    data.push(props.rawData[i]);\n  }\n  if (data.length) {\n    return (\n      <TableContainer component={Paper} className={classes.tableContainer}>\n        <div\n          style={{\n            display: \"flex\",\n            \"align-items\": \"center\",\n            \"justify-content\": \"center\"\n          }}\n        >\n          <button\n            style={{ marginRight: \"16px\" }}\n            onClick={_ => {\n              props.setCountry(null);\n            }}\n          >\n            Back\n          </button>\n          <h2>Data for {props.countrySelected}</h2>\n        </div>\n\n        <Table className={classes.table} aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>\n                <b>Date</b>\n              </TableCell>\n              <TableCell align=\"right\">\n                <b>Confirmed</b>\n              </TableCell>\n              <TableCell align=\"right\">\n                <b>Deaths</b>\n              </TableCell>\n              <TableCell align=\"right\">\n                <b>Recovered</b>\n              </TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {data.map((row, index) => (\n              <TableRow key={index}>\n                <TableCell component=\"th\" scope=\"row\">\n                  {row.date}\n                </TableCell>\n                <TableCell align=\"right\">{row.confirmed}</TableCell>\n                <TableCell align=\"right\">{row.deaths}</TableCell>\n                <TableCell align=\"right\">{row.recovered}</TableCell>\n                {/* <TableCell align=\"right\">\n                {props[country][props[country].length - 1].deaths}\n                &nbsp;(+\n                {props[country][props[country].length - 1].deaths -\n                  props[country][props[country].length - 2].deaths}\n                )\n              </TableCell>\n              <TableCell align=\"right\">\n                {props[country][props[country].length - 1].recovered}\n                &nbsp;(+\n                {props[country][props[country].length - 1].recovered -\n                  props[country][props[country].length - 2].recovered}\n                )\n              </TableCell> */}\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    );\n  }\n  return null;\n}\n","import React from \"react\";\n\nexport default function Summary(props) {\n  var countries = Object.keys(props).sort();\n  var total = 0;\n  var deaths = 0;\n  var recovered = 0;\n  countries.forEach(c => {\n    total += props[c][props[c].length - 1].confirmed;\n    deaths += props[c][props[c].length - 1].deaths;\n    recovered += props[c][props[c].length - 1].recovered;\n  });\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"space-around\",\n        flexWrap: \"wrap\"\n      }}\n    >\n      <div style={{ color: \"slategrey\", minWidth: \"300px\" }}>\n        <h1>Confirmed</h1>\n        <h3>{total}</h3>\n      </div>\n      <div style={{ color: \"red\", minWidth: \"300px\" }}>\n        <h1>Deaths</h1>\n        <h3>{deaths}</h3>\n      </div>\n      <div style={{ color: \"green\", minWidth: \"300px\" }}>\n        <h1>Recovered</h1>\n        <h3>{recovered}</h3>\n      </div>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Table from \"./components/Table\";\nimport TableDetails from \"./components/TableDetails\";\nimport Summary from \"./components/Summary\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.setCountry = this.setCountry.bind(this);\n  }\n  state = {\n    covidData: [],\n    countrySelected: null\n  };\n  componentDidMount() {\n    fetch(\"https://pomber.github.io/covid19/timeseries.json\")\n      .then(response => response.json())\n      .then(data => {\n        this.setState({ covidData: data });\n      });\n  }\n  setCountry(c) {\n    this.setState({\n      countrySelected: c\n    });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Summary {...this.state.covidData} />\n        {this.state.countrySelected ? (\n          <TableDetails\n            rawData={this.state.covidData[this.state.countrySelected]}\n            countrySelected={this.state.countrySelected}\n            setCountry={this.setCountry}\n          />\n        ) : (\n          <Table\n            covidData={this.state.covidData}\n            setCountry={this.setCountry}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}