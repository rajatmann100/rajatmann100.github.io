{"version":3,"sources":["components/DragDropApp.jsx","serviceWorker.js","index.js"],"names":["DragDropApp","props","movableComponents","i","push","index","state","console","log","this","divArr","j","onDrop","event","target","getAttribute","gridDropCoordinates","split","droppedElementIndex","parseInt","dataTransfer","getData","setState","style","gridRowStart","gridColumnStart","onDragOver","preventDefault","className","map","draggable","onDragStart","setData","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mQAoEeA,G,kBA/Db,WAAYC,GAAQ,IAAD,sBACjB,4CAAMA,IAEN,IADA,IAAMC,EAAoB,GACjBC,EAAI,EAAGA,EAAI,IAAKA,EACvBD,EAAkBE,KAAK,CAAEC,MAAOF,IAJjB,OAMjB,EAAKG,MAAQ,CACXJ,kBAAmBA,GAPJ,E,sEAWT,IAAD,OACPK,QAAQC,IAAIC,KAAKH,MAAMJ,mBAEvB,IADA,IAAMQ,EAAS,GACNP,EAAI,EAAGA,EAjBF,IAiBmBA,EAC/B,IAAK,IAAIQ,EAAI,EAAGA,EAjBJ,IAiBqBA,EAC/BD,EAAON,KACL,yBACEC,MAAOF,EAAI,EAAI,KAAOQ,EAAI,GAC1BC,OAAQ,SAAAC,GACNN,QAAQC,IAAIK,EAAMC,OAAOC,aAAa,UACtC,IAAIC,EAAsBH,EAAMC,OAC7BC,aAAa,SACbE,MAAM,KACLC,EAAsBC,SACxBN,EAAMO,aAAaC,QAAQ,kBAE7B,EAAKC,UAAS,SAAAhB,GAKZ,OAJAA,EAAMJ,kBAAkBgB,GAAqBK,MAAQ,CACnDC,aAAcL,SAASH,EAAoB,IAC3CS,gBAAiBN,SAASH,EAAoB,KAEzCV,MAGXoB,WAAY,SAAAb,GACVA,EAAMc,qBAMhB,OACE,6BACE,yBAAKC,UAAU,sBAAsBlB,GACrC,yBAAKkB,UAAU,iBACZnB,KAAKH,MAAMJ,kBAAkB2B,KAAI,SAAA1B,GAAC,OACjC,yBACE2B,WAAS,EACTP,MAAOpB,EAAEoB,MACTlB,MAAOF,EAAEE,MACT0B,YAAa,SAAAlB,GAAK,OAChBA,EAAMO,aAAaY,QAAQ,gBAAiB7B,EAAEE,SAG/CF,EAAEE,gB,GAxDS4B,cCQNC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.fab66fa0.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./DragDropApp.scss\";\nconst GRID_ROWS = 3;\nconst GRID_COLS = 6;\nclass DragDropApp extends Component {\n  constructor(props) {\n    super(props);\n    const movableComponents = [];\n    for (let i = 0; i < 4; ++i) {\n      movableComponents.push({ index: i });\n    }\n    this.state = {\n      movableComponents: movableComponents\n    };\n  }\n\n  render() {\n    console.log(this.state.movableComponents);\n    const divArr = [];\n    for (let i = 0; i < GRID_ROWS; ++i) {\n      for (let j = 0; j < GRID_COLS; ++j) {\n        divArr.push(\n          <div\n            index={i + 1 + \",\" + (j + 1)}\n            onDrop={event => {\n              console.log(event.target.getAttribute(\"index\"));\n              let gridDropCoordinates = event.target\n                .getAttribute(\"index\")\n                .split(\",\");\n              let droppedElementIndex = parseInt(\n                event.dataTransfer.getData(\"element-index\")\n              );\n              this.setState(state => {\n                state.movableComponents[droppedElementIndex].style = {\n                  gridRowStart: parseInt(gridDropCoordinates[0]),\n                  gridColumnStart: parseInt(gridDropCoordinates[1])\n                };\n                return state;\n              });\n            }}\n            onDragOver={event => {\n              event.preventDefault();\n            }}\n          ></div>\n        );\n      }\n    }\n    return (\n      <div>\n        <div className=\"drag-drop-app-base\">{divArr}</div>\n        <div className=\"drag-drop-app\">\n          {this.state.movableComponents.map(i => (\n            <div\n              draggable\n              style={i.style}\n              index={i.index}\n              onDragStart={event =>\n                event.dataTransfer.setData(\"element-index\", i.index)\n              }\n            >\n              {i.index}\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\nexport default DragDropApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/DragDropApp';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}